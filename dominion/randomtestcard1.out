---- randomtestcard1 ----
Testing complete.

File '../dominion.c'
Lines executed:4.01% of 299
Creating 'dominion.c.gcov'

File '../cards.c'
Lines executed:0.78% of 257
Creating 'cards.c.gcov'

Lines executed:2.52% of 556
        -:    0:Source:../cards.c
        -:    0:Programs:2
        -:    1:#include "cards.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "debugprint.h"
        -:    5:
    #####:    6:int adventurer_effect(gameState* state) {
    #####:    7:    int drawnTreasure=0;
    #####:    8:    int tempHand[MAX_HAND], i=0;
        -:    9:    
    #####:   10:    while(drawnTreasure<2) {
        -:   11:        // if the deck empty, shuffle discard and add to deck
    #####:   12:        if(state->deckCount[state->whoseTurn]<1)
    #####:   13:            shuffle(state->whoseTurn, state);
        -:   14:        
    #####:   15:        drawCard(state->whoseTurn, state);
        -:   16:        
        -:   17:        // top card of hand is most recently drawn card.
    #####:   18:        int drawn = state->hand[state->whoseTurn][state->handCount[state->whoseTurn]-1];
    #####:   19:        if(drawn == copper || drawn == silver || drawn == gold) {
    #####:   20:            drawnTreasure++;
        -:   21:        } else {
    #####:   22:            tempHand[i]=drawn;
    #####:   23:            state->handCount[state->whoseTurn]--; //remove top card
    #####:   24:            i++;
        -:   25:        }
        -:   26:    }
        -:   27:    
    #####:   28:    while(i>0) {
        -:   29:        // discard all cards in play that have been drawn
    #####:   30:        state->discard[state->whoseTurn][state->discardCount[state->whoseTurn]] = tempHand[i-1];
    #####:   31:        state->discardCount[state->whoseTurn]++;
    #####:   32:        i--;
        -:   33:    }
        -:   34:    
    #####:   35:    return 0;
        -:   36:}
        -:   37:
    #####:   38:int council_room_effect(gameState* state, int handPos) {
        -:   39:    // +4 Cards
    #####:   40:    for(int i=0; i<4; i++)
    #####:   41:        drawCard(state->whoseTurn, state);
        -:   42:
        -:   43:    // +1 Buy
    #####:   44:    state->numBuys++;
        -:   45:
        -:   46:    // Each other player draws a card
    #####:   47:    for(int i=0; i<state->numPlayers; i++)
    #####:   48:        if (i != state->whoseTurn)
    #####:   49:            drawCard(i, state);
        -:   50:
        -:   51:    // put played card in played card pile
    #####:   52:    discardCard(handPos, state->whoseTurn, state, 0);
        -:   53:
    #####:   54:    return 0;
        -:   55:}
        -:   56:
    #####:   57:int feast_effect(gameState* state, int choice1) {
        -:   58:    int temphand[MAX_HAND];
        -:   59:    // gain card with cost up to 5
        -:   60:    // Backup hand
    #####:   61:    for (int i=0; i<=state->handCount[state->whoseTurn]; i++) {
    #####:   62:        temphand[i] = state->hand[state->whoseTurn][i]; // Backup card
    #####:   63:        state->hand[state->whoseTurn][i] = -1; // Set to nothing
        -:   64:    }
        -:   65:    // Backup hand
        -:   66:
        -:   67:    // Update Coins for Buy
    #####:   68:    updateCoins(state->whoseTurn, state, 5);
        -:   69:
    #####:   70:    int x = 1; // Condition to loop on
    #####:   71:    while(x == 1) { // Buy one card
    #####:   72:        if (supplyCount(choice1, state) <= 0){
    #####:   73:                debug_printf("None of that card left, sorry!\n");
    #####:   74:                debug_printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:   75:
    #####:   76:        } else if (state->coins < getCost(choice1)){
    #####:   77:            printf("That card is too expensive!\n");
    #####:   78:            debug_printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:   79:        
        -:   80:        } else {
    #####:   81:            debug_printf("Deck Count: %d\n",
        -:   82:                state->handCount[state->whoseTurn] +
        -:   83:                state->deckCount[state->whoseTurn] +
        -:   84:                state->discardCount[state->whoseTurn]
        -:   85:            );
        -:   86:
    #####:   87:            gainCard(choice1, state, 0, state->whoseTurn); // Gain the card
    #####:   88:            x = 0; // No more buying cards
        -:   89:
    #####:   90:            debug_printf("Deck Count: %d\n",
        -:   91:                state->handCount[state->whoseTurn] +
        -:   92:                state->deckCount[state->whoseTurn] +
        -:   93:                state->discardCount[state->whoseTurn]
        -:   94:            );
        -:   95:        }
        -:   96:    }     
        -:   97:
        -:   98:    // Reset Hand
    #####:   99:    for (int i=0; i <= state->handCount[state->whoseTurn]; i++) {
    #####:  100:        state->hand[state->whoseTurn][i] = temphand[i];
    #####:  101:        temphand[i] = -1;
        -:  102:    }
        -:  103:    // Reset Hand
        -:  104:
    #####:  105:    return 0;
        -:  106:}
        -:  107:
        1:  108:int gardens_effect() {
        1:  109:    return -1;
        -:  110:}
        -:  111:
    #####:  112:int mine_effect(gameState* state, int handPos, int choice1, int choice2) {
    #####:  113:    int j = state->hand[state->whoseTurn][choice1]; // store card we will trash
        -:  114:
    #####:  115:    if (state->hand[state->whoseTurn][choice1] < copper || state->hand[state->whoseTurn][choice1] > gold)
    #####:  116:        return -1;
        -:  117:
    #####:  118:    if (choice2 > treasure_map || choice2 < curse)
    #####:  119:        return -1;
        -:  120:
    #####:  121:    if ((getCost(state->hand[state->whoseTurn][choice1]) + 3) > getCost(choice2))
    #####:  122:        return -1;
        -:  123:
    #####:  124:    gainCard(choice2, state, 2, state->whoseTurn);
        -:  125:
        -:  126:    // discard card from hand
    #####:  127:    discardCard(handPos, state->whoseTurn, state, 0);
        -:  128:
        -:  129:    // discard trashed card
    #####:  130:    for(int i = 0; i < state->handCount[state->whoseTurn]; i++)
    #####:  131:        if (state->hand[state->whoseTurn][i] == j) {
    #####:  132:            discardCard(i, state->whoseTurn, state, 0);			
    #####:  133:            break;
        -:  134:        }
    #####:  135:    return 0;
        -:  136:}
        -:  137:
    #####:  138:int remodel_effect(gameState* state, int handPos, int choice1, int choice2) {
    #####:  139:    int j = state->hand[state->whoseTurn][choice1]; // store card we will trash
        -:  140:    
    #####:  141:    if ((getCost(state->hand[state->whoseTurn][choice1]) + 2) > getCost(choice2) )
    #####:  142:        return -1;
        -:  143:
    #####:  144:    gainCard(choice2, state, 0, state->whoseTurn);
        -:  145:
        -:  146:    // discard card from hand
    #####:  147:    discardCard(handPos, state->whoseTurn, state, 0);
        -:  148:
        -:  149:    // discard trashed card
    #####:  150:    for(int i = 0; i < state->handCount[state->whoseTurn]; i++)
    #####:  151:        if (state->hand[state->whoseTurn][i] == j) {
    #####:  152:            discardCard(i, state->whoseTurn, state, 0);			
    #####:  153:            break;
        -:  154:        }
        -:  155:    
    #####:  156:    return 0;
        -:  157:}
        -:  158:
    #####:  159:int smithy_effect(gameState* state, int handPos) {
        -:  160:    // +3 Cards
    #####:  161:    for(int i=0; i<3; i++)
    #####:  162:        drawCard(state->whoseTurn, state);
        -:  163:
        -:  164:    // discard card from hand
    #####:  165:    discardCard(handPos, state->whoseTurn, state, 0);
    #####:  166:    return 0;
        -:  167:}
        -:  168:
    #####:  169:int village_effect(gameState* state, int handPos) {
        -:  170:    // +1 Card
    #####:  171:    drawCard(state->whoseTurn, state);
        -:  172:
        -:  173:    // +2 Actions
    #####:  174:    state->numActions += 2;
        -:  175:
        -:  176:    // discard played card from hand
    #####:  177:    discardCard(handPos, state->whoseTurn, state, 0);
    #####:  178:    return 0;
        -:  179:}
        -:  180:
    #####:  181:int baron_effect(gameState* state, int choice1) {
    #####:  182:    state->numBuys++; // Increase buys by 1!
    #####:  183:    if (choice1 > 0){ // Boolean true or going to discard an estate
        -:  184:        int p; // Iterator for hand!
    #####:  185:        int card_not_discarded = 1; // Flag for discard set!
    #####:  186:        while(card_not_discarded) {
    #####:  187:            if (state->hand[state->whoseTurn][p] == estate) { // Estate card
    #####:  188:                state->coins += 4; // Add 4 coins to the amount of coins
    #####:  189:                state->discard[state->whoseTurn][state->discardCount[state->whoseTurn]] = state->hand[state->whoseTurn][p];
    #####:  190:                state->discardCount[state->whoseTurn]++;
        -:  191:                
    #####:  192:                for (p=0 ;p < state->handCount[state->whoseTurn]; p++)
    #####:  193:                    state->hand[state->whoseTurn][p] = state->hand[state->whoseTurn][p+1];
        -:  194:                
    #####:  195:                state->hand[state->whoseTurn][state->handCount[state->whoseTurn]] = -1;
    #####:  196:                state->handCount[state->whoseTurn]--;
    #####:  197:                card_not_discarded = 0; // Exit the loop
    #####:  198:            } else if (p > state->handCount[state->whoseTurn]) {
    #####:  199:                debug_printf("No estate cards in your hand, invalid choice\n");
    #####:  200:                debug_printf("Must gain an estate if there are any\n");
        -:  201:                
    #####:  202:                if (supplyCount(estate, state) > 0) {
    #####:  203:                    gainCard(estate, state, 0, state->whoseTurn);
    #####:  204:                    state->supplyCount[estate]--; // Decrement estates
        -:  205:
    #####:  206:                    if (supplyCount(estate, state) == 0)
    #####:  207:                        isGameOver(state);
        -:  208:
        -:  209:                }
    #####:  210:                card_not_discarded = 0; // Exit the loop
        -:  211:            }
        -:  212:
        -:  213:            else {
    #####:  214:                p++; // Next card
        -:  215:            }
        -:  216:        }
    #####:  217:    } else if (supplyCount(estate, state) > 0) {
    #####:  218:        gainCard(estate, state, 0, state->whoseTurn); // Gain an estate
    #####:  219:        state->supplyCount[estate]--; // Decrement Estates
        -:  220:        
    #####:  221:        if (supplyCount(estate, state) == 0)
    #####:  222:            isGameOver(state);
        -:  223:    }
    #####:  224:    return 0;
        -:  225:}
        -:  226:
    #####:  227:int great_hall_effect(gameState* state, int handPos) {
        -:  228:    // +1 Card
    #####:  229:    drawCard(state->whoseTurn, state);
        -:  230:
        -:  231:    // +1 Actions
    #####:  232:    state->numActions++;
        -:  233:
        -:  234:    // discard card from hand
    #####:  235:    discardCard(handPos, state->whoseTurn, state, 0);
    #####:  236:    return 0;
        -:  237:}
        -:  238:
    #####:  239:int minion_effect(gameState* state, int handPos, int choice1, int choice2) {
        -:  240:    // +1 action
    #####:  241:    state->numActions++;
        -:  242:
        -:  243:    // discard card from hand
    #####:  244:    discardCard(handPos, state->whoseTurn, state, 0);
        -:  245:
    #####:  246:    if (choice1) { 
        -:  247:        // +2 coins 
    #####:  248:        state->coins = state->coins + 2;
    #####:  249:    } else if (choice2) {
        -:  250:        // discard hand
    #####:  251:        while(numHandCards(state) > 0) discardCard(handPos, state->whoseTurn, state, 0);
        -:  252:
        -:  253:        // draw 4
    #####:  254:        for (int i = 0; i < 4; i++) drawCard(state->whoseTurn, state);
        -:  255:
        -:  256:        // other players discard hand and redraw if hand size > 4
    #####:  257:        for (int i = 0; i < state->numPlayers; i++)
    #####:  258:            if (i != state->whoseTurn)
    #####:  259:                if ( state->handCount[i] > 4 ) {
        -:  260:                    // discard hand
    #####:  261:                    while( state->handCount[i] > 0 )
    #####:  262:                        discardCard(handPos, i, state, 0);
        -:  263:
        -:  264:                    // draw 4
    #####:  265:                    for (int j = 0; j < 4; j++)
    #####:  266:                        drawCard(i, state);
        -:  267:                }
        -:  268:    }
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int steward_effect(gameState* state, int handPos, int choice1, int choice2, int choice3) {
    #####:  273:    if (choice1 == 1) {
    #####:  274:        drawCard(state->whoseTurn, state); // +2 cards
    #####:  275:        drawCard(state->whoseTurn, state);
    #####:  276:    } else if (choice1 == 2) {
    #####:  277:        state->coins += 2; // +2 coins
        -:  278:    } else {
    #####:  279:        discardCard(choice2, state->whoseTurn, state, 1); // trash 2 cards in hand
    #####:  280:        discardCard(choice3, state->whoseTurn, state, 1);
        -:  281:    }
        -:  282:
        -:  283:    // discard card from hand
    #####:  284:    discardCard(handPos, state->whoseTurn, state, 0);
    #####:  285:    return 0;
        -:  286:}
        -:  287:
    #####:  288:int tribute_effect(gameState* state) {
    #####:  289:    int revealedCards[2] = {-1, 1};
    #####:  290:    if ((state->discardCount[nextPlayer(state)] + state->deckCount[nextPlayer(state)]) <= 1) {
    #####:  291:        if (state->deckCount[nextPlayer(state)] > 0){
    #####:  292:            revealedCards[0] = state->deck[nextPlayer(state)][state->deckCount[nextPlayer(state)]-1];
    #####:  293:            state->deckCount[nextPlayer(state)]--;
        -:  294:
    #####:  295:        } else if (state->discardCount[nextPlayer(state)] > 0) {
    #####:  296:            revealedCards[0] = state->discard[nextPlayer(state)][state->discardCount[nextPlayer(state)]-1];
    #####:  297:            state->discardCount[nextPlayer(state)]--;
        -:  298:
        -:  299:        } else {
    #####:  300:            debug_printf("No cards to reveal\n");
        -:  301:        }
        -:  302:    } else {
    #####:  303:        if (state->deckCount[nextPlayer(state)] == 0) {
    #####:  304:            for (int i=0; i < state->discardCount[nextPlayer(state)]; i++) {
    #####:  305:                state->deck[nextPlayer(state)][i] = state->discard[nextPlayer(state)][i]; // Move to deck
    #####:  306:                state->deckCount[nextPlayer(state)]++;
    #####:  307:                state->discard[nextPlayer(state)][i] = -1;
    #####:  308:                state->discardCount[nextPlayer(state)]--;
        -:  309:            }
    #####:  310:            shuffle(nextPlayer(state), state); // Shuffle the deck
        -:  311:        }
        -:  312:
    #####:  313:        revealedCards[0] = state->deck[nextPlayer(state)][state->deckCount[nextPlayer(state)]-1];
    #####:  314:        state->deck[nextPlayer(state)][state->deckCount[nextPlayer(state)]--] = -1;
    #####:  315:        state->deckCount[nextPlayer(state)]--;
        -:  316:
    #####:  317:        revealedCards[1] = state->deck[nextPlayer(state)][state->deckCount[nextPlayer(state)]-1];
    #####:  318:        state->deck[nextPlayer(state)][state->deckCount[nextPlayer(state)]--] = -1;
    #####:  319:        state->deckCount[nextPlayer(state)]--;
        -:  320:    }    
        -:  321:
    #####:  322:    if (revealedCards[0] == revealedCards[1]) { // If we have a duplicate card, just drop one 
    #####:  323:        state->playedCards[state->playedCardCount] = revealedCards[1];
    #####:  324:        state->playedCardCount++;
    #####:  325:        revealedCards[1] = -1;
        -:  326:    }
        -:  327:
    #####:  328:    for (int i=0; i<=2; i++){
    #####:  329:        if (revealedCards[i] == copper || revealedCards[i] == silver || revealedCards[i] == gold) { // Treasure cards
    #####:  330:            state->coins += 2;
    #####:  331:        } else if (revealedCards[i] == estate || revealedCards[i] == duchy ||
    #####:  332:                revealedCards[i] == province || revealedCards[i] == gardens ||
    #####:  333:                revealedCards[i] == great_hall) { // Victory Card Found
    #####:  334:            drawCard(state->whoseTurn, state);
    #####:  335:            drawCard(state->whoseTurn, state);
        -:  336:        } else { // Action Card
    #####:  337:            state->numActions = state->numActions + 2;
        -:  338:        }
        -:  339:    }
    #####:  340:    return 0;
        -:  341:}
        -:  342:
    #####:  343:int ambassador_effect(gameState* state, int handPos, int choice1, int choice2) {
    #####:  344:    int j = 0; // used to check if player has enough cards to discard
        -:  345:
    #####:  346:    if (choice2 > 2 || choice2 < 0) return -1;				
    #####:  347:    if (choice1 == handPos) return -1;
        -:  348:
    #####:  349:    for (int i = 0; i < state->handCount[state->whoseTurn]; i++)
    #####:  350:        if (i != handPos && i == state->hand[state->whoseTurn][choice1] && i != choice1)
    #####:  351:            j++;
        -:  352:    
    #####:  353:    if (j < choice2) return -1;				
        -:  354:
    #####:  355:    debug_printf("Player %d reveals card number: %d\n", state->whoseTurn, state->hand[state->whoseTurn][choice1]);
        -:  356:
        -:  357:    // increase supply count for choosen card by amount being discarded
    #####:  358:    state->supplyCount[state->hand[state->whoseTurn][choice1]] += choice2;
        -:  359:
        -:  360:    // each other player gains a copy of revealed card
    #####:  361:    for (int i = 0; i<state->numPlayers; i++)
    #####:  362:        if (i != state->whoseTurn)
    #####:  363:            gainCard(state->hand[state->whoseTurn][choice1], state, 0, i);
        -:  364:
        -:  365:    // discard played card from hand
    #####:  366:    discardCard(handPos, state->whoseTurn, state, 0);			
        -:  367:
        -:  368:    // trash copies of cards returned to supply
    #####:  369:    for (int i=0; i<choice2; i++)
    #####:  370:        for (int k=0; j<state->handCount[state->whoseTurn]; k++)
    #####:  371:            if (state->hand[state->whoseTurn][k] == state->hand[state->whoseTurn][choice1]) {
    #####:  372:                discardCard(k, state->whoseTurn, state, 1);
    #####:  373:                break;
        -:  374:            }
        -:  375:
    #####:  376:    return 0;
        -:  377:}
        -:  378:
    #####:  379:int cutpurse_effect(gameState* state, int handPos) {
    #####:  380:    updateCoins(state->whoseTurn, state, 2);
    #####:  381:    for (int i = 0; i < state->numPlayers; i++)
    #####:  382:        if (i != state->whoseTurn)
    #####:  383:            for (int j = 0; j < state->handCount[i]; j++) {
    #####:  384:                if (state->hand[i][j] == copper) {
    #####:  385:                    discardCard(j, i, state, 0);
    #####:  386:                    break;
        -:  387:                }
        -:  388:                
    #####:  389:                if (j == state->handCount[i]) {
    #####:  390:                    for (int k = 0; k < state->handCount[i]; k++)
    #####:  391:                        debug_printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  392:                    
    #####:  393:                    break;
        -:  394:                }
        -:  395:            }
        -:  396:
        -:  397:    // discard played card from hand
    #####:  398:    discardCard(handPos, state->whoseTurn, state, 0);			
        -:  399:
    #####:  400:    return 0;
        -:  401:}
        -:  402:
    #####:  403:int embargo_effect(gameState* state, int handPos, int choice1) {
        -:  404:    // +2 Coins
    #####:  405:    state->coins = state->coins + 2;
        -:  406:
        -:  407:    // see if selected pile is in play
    #####:  408:    if ( state->supplyCount[choice1] == -1 )
    #####:  409:        return -1;
        -:  410:
        -:  411:    // add embargo token to selected supply pile
    #####:  412:    state->embargoTokens[choice1]++;
        -:  413:
        -:  414:    // trash card
    #####:  415:    discardCard(handPos, state->whoseTurn, state, 1);
    #####:  416:    return 0;
        -:  417:}
        -:  418:
    #####:  419:int outpost_effect(gameState* state, int handPos) {
        -:  420:    // set outpost flag
    #####:  421:    state->outpostPlayed++;
        -:  422:
        -:  423:    // discard card
    #####:  424:    discardCard(handPos, state->whoseTurn, state, 0);
    #####:  425:    return 0;
        -:  426:}
        -:  427:
    #####:  428:int salvager_effect(gameState* state, int handPos, int choice1) {
        -:  429:    // +1 buy
    #####:  430:    state->numBuys++;
        -:  431:
    #####:  432:    if (choice1) {
        -:  433:        //gain coins equal to trashed card
    #####:  434:        state->coins = state->coins * getCost(handCard(choice1, state));
        -:  435:        //trash card
    #####:  436:        discardCard(choice1, state->whoseTurn, state, 1);	
        -:  437:    }
        -:  438:
        -:  439:    // discard card
    #####:  440:    discardCard(handPos, state->whoseTurn, state, 0);
    #####:  441:    return 0;
        -:  442:}
        -:  443:
    #####:  444:int sea_hag_effect(gameState* state) {
    #####:  445:    for (int i=0; i<state->numPlayers; i++)
    #####:  446:        if (i != state->whoseTurn) {
    #####:  447:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  448:            state->deckCount[i]--;
    #####:  449:            state->discardCount[i]++;
    #####:  450:            state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse
        -:  451:        }
        -:  452:        
    #####:  453:    return 0;
        -:  454:}
        -:  455:
    #####:  456:int treasure_map_effect(gameState* state, int handPos) {
        -:  457:    // search hand for another treasure_map
    #####:  458:    int index = -1;
    #####:  459:    for (int i=0; i<state->handCount[state->whoseTurn]; i++)
    #####:  460:        if (state->hand[state->whoseTurn][i] == treasure_map && i != handPos) {
    #####:  461:            index = i;
    #####:  462:            break;
        -:  463:        }
        -:  464:    
    #####:  465:    if (index > -1) {
        -:  466:        // trash both treasure cards
    #####:  467:        discardCard(handPos, state->whoseTurn, state, 1);
    #####:  468:        discardCard(index, state->whoseTurn, state, 1);
        -:  469:
        -:  470:        // gain 4 Gold cards
    #####:  471:        for (int i = 0; i < 4; i++)
    #####:  472:            gainCard(gold, state, 1, state->whoseTurn);
        -:  473:
        -:  474:        // return success
    #####:  475:        return 1;
        -:  476:    }
        -:  477:
        -:  478:    // no second treasure_map found in hand
    #####:  479:    return -1;
        -:  480:}

